import sys
print("версия Python: {}".format(sys.version))
import pandas as pd
print("версия pandas: {}".format(pd.__version__))
import numpy as np
print("версия NumPy: {}".format(np.__version__))
import scipy as sp
print("версия SciPy: {}".format(sp.__version__))
import IPython
print("версия IPython: {}".format(IPython.__version__))
import sklearn
print("версия scikit-learn: {}".format(sklearn.__version__))
import mglearn
print("версия mglearn: {}".format(mglearn.__version__))
import matplotlib
print("версия matplotlib: {}".format(matplotlib.__version__))
import matplotlib.pyplot as plt
import csv
print("версия csv: {}".format(csv.__version__))
from matplotlib import cm
from sklearn.metrics import silhouette_samples
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from collections import Counter

# ----------------------------- Чтение файла ----------------------------------
def csv_reader(file_obj):
    reader = csv.reader(file_obj)
    str = []
    for row in reader:
        print(" ".join(row))
        str += row;

# ----------------------------- Извлечение данных из файла----------------------------------
def GetDataSetFromFile(csv_path):
    with open(csv_path, "r") as f_obj:
        csv_reader(f_obj)
    dataset = np.loadtxt(csv_path, delimiter=";")
    X = dataset[:, 0]
    y = dataset[:, 1]
    print("X.shape:", X.shape)
    print("y.shape:", y.shape)
    plt.plot(X, y, 'o')
    plt.ylim(0, 70)
    plt.xlim(0, 140)
    plt.xlabel("Скорость, км/ч")
    plt.ylabel("Дистанция, м")
    return dataset;

#---------------- Метод локтя ------------------------------------------------------------------
def ElbowMethod(X):
    distortions = []
    for i in range(1, 11):
        km = KMeans(n_clusters=i, #задаем число кластеров
                    init='k-means++', # Метод инициализации, {'k-means++', 'random' или ndarray}
                    n_init=10, #Количество раз, когда алгоритм k-means будет выполняться с разными значениями центров кластеров. Окончательные результаты будут самым лучшим выходом n_init последовательно работает в условиях инерции.
                    max_iter=300, # Максимальное число итераций алгоритма k-средних для a одиночная пробежка.
                    random_state=0) # Determines random number generation for centroid initialization. Use an int to make the randomness deterministic.
        km.fit(X)
        distortions.append(km.inertia_)
    print('Искажение : %.2f ' % km.inertia_)
    plt.plot(range(1, 11), distortions, marker='o')
    plt.xlabel('Чиcлo кластеров')
    plt.ylabel('Искажение')
    plt.show()
    print("ElbowMethod")

#---------------- Силуэтный анализ ------------------------------------------------------------------
def SilhouetteAnalyze4(X):
    km = KMeans(n_clusters=4,
                init='k-means++',
                n_init=10,
                max_iter=300,
                tol=1e-04,
                random_state=0)
    y_km = km.fit_predict(X)
    cluster_labels = np.unique(y_km)
    n_clusters = cluster_labels.shape[0]
    silhouette_vals = silhouette_samples(X, y_km, metric='euclidean')

    y_ax_lower, y_ax_upper = 0, 0
    yticks = []
    for i, с in enumerate(cluster_labels):
        c_silhouette_vals = silhouette_vals[y_km == с]
        c_silhouette_vals.sort()
        y_ax_upper += len(c_silhouette_vals)
        color = cm.jet(float(i) / n_clusters)
        plt.barh(range(y_ax_lower, y_ax_upper),
                 c_silhouette_vals,
                 height=1.0,
                 edgecolor='none',
                 color=color)
        yticks.append((y_ax_lower + y_ax_upper) / 2)
        y_ax_lower += len(c_silhouette_vals)

    silhouette_avg = np.mean(silhouette_vals)
    plt.axvline(silhouette_avg,
                color="red",
                linestyle="--")
    plt.yticks(yticks, cluster_labels + 1)
    plt.ylabel('Кластер')
    plt.xlabel('Силуэтный коэффициент')
    plt.show()
    print("ElbowMethod")

def SilhouetteAnalyze3(X):
    km = KMeans(n_clusters=3,
                init='k-means++',
                n_init=10,
                max_iter=300,
                tol=1e-04,
                random_state=0)
    y_km = km.fit_predict(X)
    cluster_labels = np.unique(y_km)
    n_clusters = cluster_labels.shape[0]
    silhouette_vals = silhouette_samples(X, y_km, metric='euclidean')

    y_ax_lower, y_ax_upper = 0, 0
    yticks = []
    for i, с in enumerate(cluster_labels):
        c_silhouette_vals = silhouette_vals[y_km == с]
        c_silhouette_vals.sort()
        y_ax_upper += len(c_silhouette_vals)
        color = cm.jet(float(i) / n_clusters)
        plt.barh(range(y_ax_lower, y_ax_upper),
                 c_silhouette_vals,
                 height=1.0,
                 edgecolor='none',
                 color=color)
        yticks.append((y_ax_lower + y_ax_upper) / 2)
        y_ax_lower += len(c_silhouette_vals)

    silhouette_avg = np.mean(silhouette_vals)
    plt.axvline(silhouette_avg,
                color="red",
                linestyle="--")
    plt.yticks(yticks, cluster_labels + 1)
    plt.ylabel('Кластер')
    plt.xlabel('Силуэтный коэффициент')
    plt.show()
    print("ElbowMethod")


#------------------------- Модель кластеризации  к-средних --------------------
def BuildKMeansModel4(X):
    kmeans = KMeans(n_clusters=4)
    kmeans.fit(X)
    points = kmeans.labels_
    print("Принадлежность к кластерам:\n{}".format(points))
    c = Counter(points)
    print("Всего точек:\n{}".format(points.size))
    print("Принадлежность к кластерам:\n{}".format(c))
    mglearn.discrete_scatter(X[:, 0], X[:, 1], kmeans.labels_, markers='^')
    mglearn.discrete_scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], [0, 1, 2, 3], markers='^', markeredgewidth=4)
    plt.legend(["кластер 1", "кластер 2","кластер 3","кластер 4"], loc='best')
    plt.xlabel("Скорость, км/ч")
    plt.ylabel("Дистанция, м")
    plt.show()
    print("BuildKMeansModel")

def BuildKMeansModel3(X):
    kmeans = KMeans(n_clusters=3)
    kmeans.fit(X)
    points = kmeans.labels_
    print("Принадлежность к кластерам:\n{}".format(points))
    c = Counter(points)
    print("Всего точек:\n{}".format(points.size))
    print("Принадлежность к кластерам:\n{}".format(c))
    mglearn.discrete_scatter(X[:, 0], X[:, 1], kmeans.labels_, markers='^')
    mglearn.discrete_scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], [0, 1, 2], markers='^', markeredgewidth=3)
    plt.legend(["кластер 1", "кластер 2", "кластер 3"], loc='best')
    plt.xlabel("Скорость, км/ч")
    plt.ylabel("Дистанция, м")
    plt.show()
    print("BuildKMeansModel")

if __name__ == "__main__":
    csv_path = "D:\dat_05.csv"
    #csv_path = "D:\dat.csv"
    dataset = GetDataSetFromFile(csv_path)
    ElbowMethod(dataset)
    BuildKMeansModel3(dataset)
    SilhouetteAnalyze3(dataset)
   # BuildKMeansModel4(dataset)
   # SilhouetteAnalyze4(dataset)

















